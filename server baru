#!/usr/bin/env python

import rospy
from beginner_tutorials.srv import MeasureDistance, MeasureDistanceResponse
import serial
import time

# Konfigurasi port serial
SERIAL_PORT = '/dev/ttyUSB0'  # Ganti dengan port sensor Anda
BAUD_RATE = 9600
THRESHOLD = 30.0  # Batas jarak tertentu untuk deteksi objek (opsional)

def process_raw_data(raw_data):
    """
    Fungsi untuk memproses data mentah menjadi jarak terukur.
    """
    try:
        # Konversi data mentah ke float
        distance = float(raw_data)
        rospy.loginfo(f"Processed Distance: {distance} cm")
        return distance
    except ValueError:
        rospy.logwarn(f"Invalid raw data received: {raw_data}")
        return -1.0  # Indikasi error

def handle_measure_distance(req):
    """
    Handle permintaan service untuk mengukur jarak.
    """
    try:
        # Buka koneksi serial
        with serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=2) as ser:
            ser.flushInput()
            time.sleep(1)  # Beri waktu agar sensor stabil

            # Baca data mentah dari sensor
            raw_data = ser.readline().decode('utf-8').strip()
            rospy.loginfo(f"Raw Data: {raw_data}")

            # Proses data mentah menjadi jarak terukur
            distance = process_raw_data(raw_data)
            return MeasureDistanceResponse(distance)
    except serial.SerialException as e:
        rospy.logerr(f"Serial error: {e}")
        return MeasureDistanceResponse(-1.0)
    except Exception as ex:
        rospy.logerr(f"Unexpected error: {ex}")
        return MeasureDistanceResponse(-1.0)

def distance_server():
    """
    Node server ROS untuk mengukur jarak.
    """
    rospy.init_node('distance_server')
    rospy.Service('measure_distance', MeasureDistance, handle_measure_distance)
    rospy.loginfo("Distance Server is ready to receive requests.")
    rospy.spin()

if __name__ == "__main__":
    distance_server()
